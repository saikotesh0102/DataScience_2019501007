evaluate(function(x){x[length(c)]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
telegram("Good", "morning")
submit()
library(swirl)
swirl()
Sys.Date()
mean(c(2, 4, 7))
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram("Good", "morning")
submit()
submit()
submit()
mad_libs(Hyderabad, the, Software)
mad_libs("Hyderabad", "the", "Software")
submit()
'I' %p% 'love' %p% 'R!'
sd(21334, 21335, 21336, 21337, 21338)
sd(c(21334, 21335, 21336, 21337, 21338))
sd(c(47, 15, 37, 20, 38, 42, 18))
sd(47, 15, 37, 20, 38, 42, 18)
x <- c(0, 1, 0, 1)
y <- c(1, 0, 1, 0)
corr(x , y)
cor(x ,y)
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 2")
library(arules)
library(arulesViz)
library(RColorBrewer)
# data <- data.frame (item_1  = c("A", "A", "D", "B", "A", "A", "B", "A", "A", "D"),
#                   item_2 = c("B", "C", "E", "C", "B", "B", "D", "B", "D", "E"),
#                   item_3 = c("C", "D", "", "E", "D", "", "E", "D", "", ""),
#                   item_4 = c("D","", "", "", "E", "", "", "", "", ""),
#                   item_5 = c("E", "", "", "", "", "", "", "", "", ""))
#The read.transactions() function read the file csv file and convert it to a transaction format
#Parameters: Transaction file: name of the csv file
#rm.duplicates : to make sure that we have no duplicate transaction entried
#format : basket (row 1: transaction ids, row 2: list of items)
#sep: separator between items, in this case commas
#cols : column number of transaction IDs
data <- read.transactions(file ="Apriori.csv", rm.duplicates = TRUE, format = "basket", sep = ",", cols = 1)
#getting rid of unnecessary quotes in transactions
txn@itemInfo$labels <- gsub("\"","",data@itemInfo$labels)
# data <- read.csv("Apriori.csv", header = TRUE)
# head(data, 10)
rules <- apriori(data, parameter = list(supp = 0.3))
inspect(rules)
itemFrequencyPlot(data, topN = 5,
col = brewer.pal(8,'Pastel2'),
main = "Absolute Item Frequency Plot")
plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")
install.packages("gplots")
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 2")
library(arules)
library(arulesViz)
library(RColorBrewer)
# data <- data.frame (item_1  = c("A", "A", "D", "B", "A", "A", "B", "A", "A", "D"),
#                   item_2 = c("B", "C", "E", "C", "B", "B", "D", "B", "D", "E"),
#                   item_3 = c("C", "D", "", "E", "D", "", "E", "D", "", ""),
#                   item_4 = c("D","", "", "", "E", "", "", "", "", ""),
#                   item_5 = c("E", "", "", "", "", "", "", "", "", ""))
#The read.transactions() function read the file csv file and convert it to a transaction format
#Parameters: Transaction file: name of the csv file
#rm.duplicates : to make sure that we have no duplicate transaction entried
#format : basket (row 1: transaction ids, row 2: list of items)
#sep: separator between items, in this case commas
#cols : column number of transaction IDs
data <- read.transactions(file ="Apriori.csv", rm.duplicates = TRUE, format = "basket", sep = ",", cols = 1)
#getting rid of unnecessary quotes in transactions
txn@itemInfo$labels <- gsub("\"","",data@itemInfo$labels)
# data <- read.csv("Apriori.csv", header = TRUE)
# head(data, 10)
rules <- apriori(data, parameter = list(supp = 0.3))
inspect(rules)
itemFrequencyPlot(data, topN = 5,
col = brewer.pal(8,'Pastel2'),
main = "Absolute Item Frequency Plot")
plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")
install.packages("gplots")
library(gplots)
library(ggplot2)
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 2")
library(arules)
library(arulesViz)
library(RColorBrewer)
# data <- data.frame (item_1  = c("A", "A", "D", "B", "A", "A", "B", "A", "A", "D"),
#                   item_2 = c("B", "C", "E", "C", "B", "B", "D", "B", "D", "E"),
#                   item_3 = c("C", "D", "", "E", "D", "", "E", "D", "", ""),
#                   item_4 = c("D","", "", "", "E", "", "", "", "", ""),
#                   item_5 = c("E", "", "", "", "", "", "", "", "", ""))
#The read.transactions() function read the file csv file and convert it to a transaction format
#Parameters: Transaction file: name of the csv file
#rm.duplicates : to make sure that we have no duplicate transaction entried
#format : basket (row 1: transaction ids, row 2: list of items)
#sep: separator between items, in this case commas
#cols : column number of transaction IDs
data <- read.transactions(file ="Apriori.csv", rm.duplicates = TRUE, format = "basket", sep = ",", cols = 1)
#getting rid of unnecessary quotes in transactions
txn@itemInfo$labels <- gsub("\"","",data@itemInfo$labels)
# data <- read.csv("Apriori.csv", header = TRUE)
# head(data, 10)
rules <- apriori(data, parameter = list(supp = 0.3))
inspect(rules)
itemFrequencyPlot(data, topN = 5,
col = brewer.pal(8,'Pastel2'),
main = "Absolute Item Frequency Plot")
plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")
install.packages("arulesViz")
library(arulesViz)
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 2")
library(arules)
library(arulesViz)
library(RColorBrewer)
# data <- data.frame (item_1  = c("A", "A", "D", "B", "A", "A", "B", "A", "A", "D"),
#                   item_2 = c("B", "C", "E", "C", "B", "B", "D", "B", "D", "E"),
#                   item_3 = c("C", "D", "", "E", "D", "", "E", "D", "", ""),
#                   item_4 = c("D","", "", "", "E", "", "", "", "", ""),
#                   item_5 = c("E", "", "", "", "", "", "", "", "", ""))
#The read.transactions() function read the file csv file and convert it to a transaction format
#Parameters: Transaction file: name of the csv file
#rm.duplicates : to make sure that we have no duplicate transaction entried
#format : basket (row 1: transaction ids, row 2: list of items)
#sep: separator between items, in this case commas
#cols : column number of transaction IDs
data <- read.transactions(file ="Apriori.csv", rm.duplicates = TRUE, format = "basket", sep = ",", cols = 1)
#getting rid of unnecessary quotes in transactions
data@itemInfo$labels <- gsub("\"","",data@itemInfo$labels)
# data <- read.csv("Apriori.csv", header = TRUE)
# head(data, 10)
rules <- apriori(data, parameter = list(supp = 0.3))
inspect(rules)
itemFrequencyPlot(data, topN = 5,
col = brewer.pal(8,'Pastel2'),
main = "Absolute Item Frequency Plot")
plot(rules)
plot(rules, method = "graph",  engine = "htmlwidget")
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
#Installing libraries
install.packages('rpart')
install.packages('caret')
install.packages('rpart.plot')
install.packages('rattle')
#Loading libraries
library(rpart,quietly = TRUE)
library(caret,quietly = TRUE)
library(rpart.plot,quietly = TRUE)
library(rattle)
data <- read.csv("lenses.data.csv", header = FALSE)4
str(data)
number.perfect.splits <- apply(X = data[-1], MARGIN = 2, FUN = function(col){
t <- table(mushrooms$class,col)
sum(t == 0)
})
# Descending order of perfect splits
order <- order(number.perfect.splits, decreasing = TRUE)
number.perfect.splits <- number.perfect.splits[order]
# Plot graph
par(mar = c(10, 2, 2, 2))
barplot(number.perfect.splits,
main = "Number of perfect splits vs feature",
xlab = "", ylab = "Feature",las = 2,col = "wheat")
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
#Loading libraries
library(rpart, quietly = TRUE)
library(caret, quietly = TRUE)
library(rpart.plot, quietly = TRUE)
library(rattle)
data <- read.csv("lenses.data.csv", header = FALSE)4
str(data)
number.perfect.splits <- apply(X = data[-1], MARGIN = 2, FUN = function(col){
t <- table(data$class, col)
sum(t == 0)
})
# Descending order of perfect splits
order <- order(number.perfect.splits, decreasing = TRUE)
number.perfect.splits <- number.perfect.splits[order]
# Plot graph
par(mar = c(10, 2, 2, 2))
barplot(number.perfect.splits,
main = "Number of perfect splits vs feature",
xlab = "", ylab = "Feature",las = 2,col = "wheat")
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
#Loading libraries
library(rpart, quietly = TRUE)
library(caret, quietly = TRUE)
library(rpart.plot, quietly = TRUE)
library(rattle)
data <- read.csv("lenses.data.csv", header = FALSE)4
str(data)
number.perfect.splits <- apply(X = data[-1], MARGIN = 2, FUN = function(col){
t <- table(data$class, col)
sum(t == 0)
})
# Descending order of perfect splits
order <- order(number.perfect.splits, decreasing = TRUE)
number.perfect.splits <- number.perfect.splits[order]
# Plot graph
par(mar = c(10, 2, 2, 2))
barplot(number.perfect.splits,
main = "Number of perfect splits vs feature",
xlab = "", ylab = "Feature",las = 2,col = "wheat")
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
library(datasets)
library(caTools)
library(party)
library(dplyr)
library(magrittr)
data <- read.csv("lenses.data.csv", header = FALSE)
str(data)
head(data)
install.packages("catools")
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
library(datasets)
library(party)
library(dplyr)
library(magrittr)
data <- read.csv("lenses.data.csv", header = FALSE)
str(data)
head(data)
sample_data <- sample.split(data, SplitRatio = 0.8)
train_data <- subset(data, sample_data == TRUE)
test_data <- subset(data, sample_data == FALSE)
install(catools)
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
library(datasets)
library(caTools)
library(party)
library(dplyr)
library(magrittr)
data <- read.csv("lenses.data.csv", header = FALSE)
str(data)
head(data)
sample_data <- sample.split(data, SplitRatio = 0.8)
train_data <- subset(data, sample_data == TRUE)
test_data <- subset(data, sample_data == FALSE)
install.packages(caTools)
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
library(datasets)
library(caTools)
library(party)
library(dplyr)
library(magrittr)
data <- read.csv("lenses.data.csv", header = FALSE)
str(data)
head(data)
train_data <- sample(1 : nrow(data), 20)
model <- ctree(v6 ~ ., train_data)
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
install.packages("caret")
library(caret)
library(rpart.plot)
data <- read.csv("lenses.data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "Label"))
str(data)
head(data)
x = lens[ , 1 : 4]
y = as.factor(lens$Label)
# As factor is used to convert a numerical data to categorical data
model = rpart(y~., x , control = rpart.control(minsplit = 0,minbucket = 0,cp = -1, maxcompete = 0, maxsurrogate = 0, usesurrogate = 0, xval = 0, maxdepth = 5))
plot(model)
text(model)
rpart.plot(model)
install.packages("caret")
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
install.packages("caret")
library(caret)
library(rpart.plot)
data <- read.csv("lenses.data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "Label"))
str(data)
head(data)
x = data[ , 2 : 5]
y = as.factor(data$Label)
# As factor is used to convert a numerical data to categorical data
model = rpart(y~., x , control = rpart.control(minsplit = 0,minbucket = 0,cp = -1, maxcompete = 0, maxsurrogate = 0, usesurrogate = 0, xval = 0, maxdepth = 5))
plot(model)
text(model)
rpart.plot(model)
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
# install.packages("caret")
library(caret)
library(rpart.plot)
data <- read.csv("lenses.data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "Label"))
str(data)
head(data)
x = data[ , 1 : 4]
y = as.factor(data$Label)
# As factor is used to convert a numerical data to categorical data
model = rpart(y~., x , control = rpart.control(minsplit = 0,minbucket = 0,cp = -1, maxcompete = 0, maxsurrogate = 0, usesurrogate = 0, xval = 0, maxdepth = 5))
plot(model)
text(model)
rpart.plot(model)
#Information Gain
sum(y == predict(model1, x, type = "class"))/ length(y)
#misclassification error
1 - sum(y == predict(model1, x, type = "class"))/ length(y)
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
# install.packages("caret")
library(caret)
library(rpart.plot)
data <- read.csv("lenses.data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "Label"))
str(data)
head(data)
x = data[ , 1 : 4]
y = as.factor(data$Label)
# As factor is used to convert a numerical data to categorical data
model = rpart(y~., x , control = rpart.control(minsplit = 0,minbucket = 0,cp = -1, maxcompete = 0, maxsurrogate = 0, usesurrogate = 0, xval = 0, maxdepth = 5))
plot(model)
text(model)
rpart.plot(model)
#Information Gain
sum(y == predict(model, x, type = "class"))/ length(y)
#misclassification error
1 - sum(y == predict(model, x, type = "class"))/ length(y)
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
# install.packages("caret")
library(caret)
library(rpart.plot)
data <- read.csv("lenses.data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "Label"))
str(data)
head(data)
x = data[ , 1 : 5]
y = as.factor(data$Label)
# As factor is used to convert a numerical data to categorical data
model = rpart(y~., x , control = rpart.control(minsplit = 0,minbucket = 0,cp = -1, maxcompete = 0, maxsurrogate = 0, usesurrogate = 0, xval = 0, maxdepth = 5))
plot(model)
text(model)
rpart.plot(model)
#Information Gain
sum(y == predict(model, x, type = "class"))/ length(y)
#misclassification error
1 - sum(y == predict(model, x, type = "class"))/ length(y)
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
# install.packages("caret")
library(caret)
library(rpart.plot)
data <- read.csv("lenses.data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "Label"))
str(data)
head(data)
x = data[ , 2 : 5]
y = as.factor(data$Label)
# As factor is used to convert a numerical data to categorical data
model = rpart(y~., x , control = rpart.control(minsplit = 0,minbucket = 0,cp = -1, maxcompete = 0, maxsurrogate = 0, usesurrogate = 0, xval = 0, maxdepth = 5))
plot(model)
text(model)
rpart.plot(model)
#Information Gain
sum(y == predict(model, x, type = "class"))/ length(y)
#misclassification error
1 - sum(y == predict(model, x, type = "class"))/ length(y)
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
# install.packages("caret")
library(caret)
library(rpart.plot)
data <- read.csv("lenses.data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "Label"))
str(data)
head(data)
x = data[ , 2 : 5]
y = as.factor(data$Label)
# As factor is used to convert a numerical data to categorical data
model = rpart(y~., x , control = rpart.control(minsplit = 0,minbucket = 0,cp = -1, maxcompete = 0, maxsurrogate = 0, usesurrogate = 0, xval = 0, maxdepth = 5))
plot(model)
text(model)
rpart.plot(model)
#Information Gain
sum(y == predict(model, x, type = "class"))/ length(y)
#misclassification error
1 - sum(y == predict(model, x, type = "class"))/ length(y)
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
# install.packages("caret")
library(caret)
library(rpart.plot)
data <- read.csv("lenses.data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "Label"))
str(data)
head(data)
x = data[ , 2 : 5]
y = as.factor(data$Label)
# As factor is used to convert a numerical data to categorical data
model = rpart(y~., x , control = rpart.control(minsplit = 0,minbucket = 0,cp = -1, maxcompete = 0, maxsurrogate = 0, usesurrogate = 0, xval = 0, maxdepth = 5))
plot(model)
text(model)
rpart.plot(model)
#Information Gain
sum(y == predict(model, x, type = "class"))/ length(y)
#misclassification error
1 - sum(y == predict(model, x, type = "class"))/ length(y)
model1 = rpart(y~., x, control = rpart.control(minsplit = 0,minbucket = 0,cp = -1, maxcompete = 0, maxsurrogate = 0, usesurrogate = 0, xval = 0, maxdepth = 7))
plot(model1)
text(model1)
rpart.plot(model1)
#Information Gain
sum(y == predict(model1, x, type = "class"))/length(y)
#miscalassification error
1 - sum(y == predict(model1, x, type = "class"))/length(y)
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 3")
# install.packages("caret")
library(caret)
library(rpart.plot)
data <- read.csv("lenses.data.csv", header = FALSE, col.names = c("1", "2", "3", "4", "5", "Label"))
str(data)
head(data)
x = data[ , 2 : 5]
y = as.factor(data$Label)
# As factor is used to convert a numerical data to categorical data
model = rpart(y~., x , control = rpart.control(minsplit = 0,minbucket = 0,cp = -1, maxcompete = 0, maxsurrogate = 0, usesurrogate = 0, xval = 0, maxdepth = 5))
plot(model)
text(model)
rpart.plot(model)
#Information Gain
sum(y == predict(model, x, type = "class"))/ length(y)
#misclassification error
1 - sum(y == predict(model, x, type = "class"))/ length(y)
model1 = rpart(y~., x, control = rpart.control(minsplit = 0,minbucket = 0,cp = -1, maxcompete = 0, maxsurrogate = 0, usesurrogate = 0, xval = 0, maxdepth = 7))
plot(model1)
text(model1)
rpart.plot(model1)
#Information Gain
sum(y == predict(model1, x, type = "class"))/length(y)
#miscalassification error
1 - sum(y == predict(model1, x, type = "class"))/length(y)
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 4")
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 4")
liver = read.csv("liver_data.csv", header = FALSE, col.names = c("mcv", "alkphos", "sgpt", "sgot", "gammagt", "drinks","selector"))
liver$selector <- as.factor(liver$selector)
liver$drinks <- cut(liver$drinks, breaks = c(0, 5,10,15,20),
labels = c('C1', 'C2', "C3", 'C4'), right = FALSE)
liver <- na.omit(liver)
train = subset(liver, liver$selector == 1)
str(train)
test = subset(liver, liver$selector == 2)
str(test)
dim(train)
dim(test)
x_train <- subset(train, select = -c(selector, drinks))
x_test <- subset(test, select = -c(selector, drinks))
library(class)
y_train = train[,6, drop = TRUE]
y_test = test[,6, drop = TRUE]
head(y_train)
length(train)
length(test)
#k = 1
fit1 = knn(x_train,x_train,y_train,k=1)
1-sum(y_test==fit1)/length(y_test)
# Misclassification error : 0.5
#K = 2
fit2 = knn(x_train,x_train,y_train,k=2)
1-sum(y_test==fit2)/length(y_test)
#Misclassification error: 0.51
#k = 3
fit3 = knn(x_train,x_train,y_train,k=3)
1-sum(y_test==fit3)/length(y_test)
#Misclassification error: 0.475
setwd("D:/Study/MSIT/2nd Year/DataScience_2019501007/Data Mining/Exam/Solutions/Question - 4")
liver <- read.csv("liver_data.csv", header = FALSE, col.names = c("mcv", "alkphos", "sgpt", "sgot", "gammagt", "drinks","selector"))
liver$selector <- as.factor(liver$selector)
liver$drinks <- cut(liver$drinks, breaks = c(0, 5, 10, 15, 20),
labels = c('C1', 'C2', "C3", 'C4'), right = FALSE)
liver <- na.omit(liver)
train = subset(liver, liver$selector == 1)
str(train)
test = subset(liver, liver$selector == 2)
str(test)
dim(train)
dim(test)
x_train <- subset(train, select = -c(selector, drinks))
x_test <- subset(test, select = -c(selector, drinks))
library(class)
y_train = train[,6, drop = TRUE]
y_test = test[,6, drop = TRUE]
length(train)
length(test)
#k = 1
fit1 = knn(x_train, x_train, y_train, k = 1)
1-sum(y_test == fit1)/length(y_test)
# Misclassification error : 0.5
#K = 2
fit2 = knn(x_train, x_train, y_train, k = 2)
1-sum(y_test == fit2)/length(y_test)
#Misclassification error: 0.51
#k = 3
fit3 = knn(x_train, x_train, y_train, k = 3)
1-sum(y_test == fit3)/length(y_test)
#Misclassification error: 0.475
